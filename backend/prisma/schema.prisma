generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MCA Officials who access the dashboard
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         String   // 'ADMIN', 'ANALYST'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  auditLogs    AuditLog[]

  @@map("users")
}

// Comprehensive audit logging for security, authentication, and system events
model AuditLog {
  id           String   @id @default(uuid())
  action       String   // Action performed (e.g., 'LOGIN_SUCCESS', 'CREATE_BUSINESS_CATEGORY', 'UPDATE_COMMENT')
  category     String   // Category of action ('AUTH', 'SECURITY', 'CONFIG', 'NCO', 'USER_ACTION')
  userId       String?  // User who performed the action (NULL for system actions)
  entityType   String?  // Type of entity affected (e.g., 'COMMENT', 'POST', 'BUSINESS_CATEGORY')
  entityId     String?  // ID of the affected entity
  details      Json?    // Additional context data
  ipAddress    String?  // IP address of the user
  userAgent    String?  // User agent string
  success      Boolean  @default(true) // Whether the action was successful
  errorMessage String?  @db.Text // Error message if action failed
  createdAt    DateTime @default(now())

  // Relations
  user         User?    @relation(fields: [userId], references: [id])

  // Indexes for performance and querying
  @@index([action])
  @@index([category])
  @@index([userId])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([success])
  @@map("audit_logs")
}

// Business categories with dynamic weighting (includes both business and user categories)
model BusinessCategory {
  id             String    @id @default(uuid())
  name           String    @unique // 'Corporate Debtor', 'Creditor to a Corporate Debtor', 'User', etc.
  weightageScore Float     @default(0.5)
  categoryType   String    @default("BUSINESS") // 'BUSINESS' or 'USER'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  companies Company[]
  comments  Comment[]

  @@map("business_categories")
}

// Main posts/drafts for consultation
model Post {
  id             String   @id @default(uuid())
  title          String
  description    String   
  standardTitle  String
  standardDescription String
  postType       String   // 'PUBLIC_CONSULTATION', 'RECRUITMENT_NOTICE', 'DRAFT_RULES'
  issuedBy       String
  issueDate      DateTime
  deadline       DateTime?
  language       String   // 'ENGLISH', 'BILINGUAL', 'HINDI'
  originalPdfUrl String?
  status         String   @default("ACTIVE") // 'ACTIVE', 'CLOSED', 'DRAFT'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  comments  Comment[]
  summaries PostSummary[]

  @@map("posts")
}

// Individual comments from stakeholders
model Comment {
  id                     String           @id @default(uuid())
  postId                 String
  postTitle              String?          // NULL for general comments
  
  // Stakeholder information - either company or individual user
  companyId              String?          // NULL for individual users
  businessCategoryId     String           // Foreign key to BusinessCategory (includes user category)
  stakeholderName        String           // Name of company or individual
  
  // AI Processing fields
  rawText                String           @db.Text
  standardText           String?          @db.Text // Standardized English translation
  processedText          String?          @db.Text // Cleaned, summary text
  language               String?          // 'en', 'hi', 'hi-en'
  labeled                String?          // 'POSITIVE', 'NEGATIVE', 'NEUTRAL'
  tone                   String?          // 'SUGGESTIVE', 'CONCERN', 'SARCASTIC', 'SUPPORTIVE'
  weightageScore         Float?           // Final calculated weightage score
  summary                String?          @db.Text // AI-generated summary
  keywords               String[]         // Array of extracted keywords
  
  // Processing status fields
  status                 String           @default("RAW") // 'RAW', 'PROCESSING', 'ANALYZED', 'FAILED'
  processingError        String?          @db.Text // Error message if processing fails
  processingAttempts     Int              @default(0)
  processedAt            DateTime?        // Timestamp of last processing attempt
  modelVersion           String?
  
  // Moderation fields
  isFlagged              Boolean          @default(false)
  isSpam                 Boolean          @default(false)
  
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  
  // Relations
  post                   Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  company                Company?         @relation(fields: [companyId], references: [id])
  businessCategory       BusinessCategory @relation(fields: [businessCategoryId], references: [id])

  // Indexes for performance
  @@index([postId])
  @@index([status])
  @@index([createdAt])
  @@index([businessCategoryId])
  @@index([companyId])
  @@map("comments")
}

model Company {
  id                   String           @id @default(uuid())
  name                 String           @unique
  uniNumber            String?          // Unique identifier if available
  state                String?
  businessCategoryId   String           // Foreign key to BusinessCategory
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  businessCategory     BusinessCategory @relation(fields: [businessCategoryId], references: [id])
  comments             Comment[]

  @@index([businessCategoryId])
  @@map("companies")
}

// Timeline snapshots of overall analysis
model PostSummary {
  id            String   @id @default(uuid())
  postId        String
  summaryText   String   @db.Text
  totalComments Int      @default(0)
  positiveCount Int      @default(0)
  negativeCount Int      @default(0)
  neutralCount  Int      @default(0)
  weightedScore Float?   // Overall weighted sentiment score
  topKeywords   String[] // Most frequent keywords at this time
  createdAt     DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([postId])
  @@index([createdAt])
  @@map("post_summaries")
}

// Queue for asynchronous processing (optional, can use Redis instead)
model ProcessingQueue {
  id          String   @id @default(uuid())
  commentId   String   @unique
  priority    Int      @default(1) // Higher priority for certain categories
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  status      String   @default("PENDING") // 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'
  errorLog    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([priority])
  @@map("processing_queue")
}

